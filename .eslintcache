[{"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/index.tsx":"1","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/reportWebVitals.ts":"2","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/App.tsx":"3","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Button.stories.tsx":"4","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Header.stories.tsx":"5","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Page.stories.tsx":"6","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Page.tsx":"7","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Header.tsx":"8","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Button.tsx":"9","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Task.stories.tsx":"10","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Task.tsx":"11","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/Task.tsx":"12","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/Task.stories.tsx":"13","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/TaskList.tsx":"14","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/TaskList.stories.tsx":"15","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/lib/redux.ts":"16","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/InboxScreen.tsx":"17","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/InboxScreen.stories.tsx":"18"},{"size":622,"mtime":1608909888108,"results":"19","hashOfConfig":"20"},{"size":426,"mtime":1608842949564,"results":"21","hashOfConfig":"20"},{"size":556,"mtime":1608909968014,"results":"22","hashOfConfig":"20"},{"size":804,"mtime":1608844463579,"results":"23","hashOfConfig":"20"},{"size":510,"mtime":1608844463580,"results":"24","hashOfConfig":"20"},{"size":605,"mtime":1608844463581,"results":"25","hashOfConfig":"20"},{"size":2415,"mtime":1608844463582,"results":"26","hashOfConfig":"20"},{"size":1356,"mtime":1608844463581,"results":"27","hashOfConfig":"20"},{"size":941,"mtime":1608844463579,"results":"28","hashOfConfig":"20"},{"size":1082,"mtime":1608887164232,"results":"29","hashOfConfig":"20"},{"size":1601,"mtime":1608887232578,"results":"30","hashOfConfig":"20"},{"size":1421,"mtime":1609005942536,"results":"31","hashOfConfig":"20"},{"size":623,"mtime":1609003297051,"results":"32","hashOfConfig":"20"},{"size":1928,"mtime":1609003682588,"results":"33","hashOfConfig":"20"},{"size":1641,"mtime":1609258358953,"results":"34","hashOfConfig":"20"},{"size":2816,"mtime":1609250999133,"results":"35","hashOfConfig":"20"},{"size":1394,"mtime":1609253579127,"results":"36","hashOfConfig":"20"},{"size":903,"mtime":1609266843497,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d5xadu",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"47"},"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/index.tsx",[],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/reportWebVitals.ts",[],["84","85"],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/App.tsx",[],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Button.stories.tsx",[],["86","87"],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Header.stories.tsx",[],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Page.stories.tsx",[],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Page.tsx",[],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Header.tsx",[],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Button.tsx",[],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Task.stories.tsx",["88"],"import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\n\nimport Task, { TaskProps, TaskState } from './Task';\n\nfunction buildStory(attrs: any) {\n    const task = {\n      id: Math.round(Math.random() * 1000000).toString(),\n      title: 'Test Task',\n      subtitle: 'on Test Board',\n      url: 'http://test.url',\n      state: TaskState.TASK_INBOX,\n      updatedAt: Date.now(),\n      ...attrs,\n    };\n    const onPinTask = action('onPinTask');\n    const onSnoozeTask = action('onSnoozeTask');\n  \n    return <Task {...{ task, onPinTask, onSnoozeTask }} />;\n  }\n  \n  storiesOf('Task', module)\n    .addDecorator(story => (\n      <div className=\"list-items\" style={{ background: 'white' }}>{story()}</div>\n    ))\n    .add('inbox task', () => buildStory({ state: TaskState.TASK_INBOX }))\n    .add('snoozed task', () => buildStory({ state: TaskState.TASK_SNOOZED }))\n    .add('pinned task', () => buildStory({ state: TaskState.TASK_PINNED }))\n    .add('archived task', () => buildStory({ state: TaskState.TASK_ARCHIVED }));","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/stories/Task.tsx",["89","90"],"import React from 'react';\n\nconst alignStyles = {\n  fontSize: '14px',\n  lineHeight: '1.5rem',\n  padding: '0.75em 0.25em',\n};\n\nexport enum TaskState {\n    TASK_INBOX,\n    TASK_PINNED,\n    TASK_SNOOZED,\n    TASK_ARCHIVED,\n  }\n\nexport interface ITask {\n    id: string;\n    title: string;\n    subtitle: string;\n    url: string;\n    state: TaskState;\n}\n\nexport interface TaskProps {\n    task: ITask;\n    onSnoozeTask: (id: string) => void;\n    onPinTask : (id: string) => void;\n}\n\nfunction Task({\n    task: { id, title, url, state, subtitle },\n    onSnoozeTask,\n    onPinTask,\n  }: TaskProps) {\n    return (\n      <div className=\"list-item\">\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          defaultChecked={state === TaskState.TASK_ARCHIVED}\n          disabled={true}\n          name=\"checked\"\n        />\n        <span className=\"checkbox-custom\" />\n      </label>\n      <input\n        type=\"text\"\n        value={title}\n        readOnly={true}\n        placeholder=\"Input title\"\n        onClick={() => window.open(url, '_new')}\n      />\n      {subtitle &&\n        <p style={{ flex: 1, color: '#666', ...alignStyles }}>{subtitle}</p>}\n      {state !== TaskState.TASK_SNOOZED &&\n        state !== TaskState.TASK_ARCHIVED &&\n        <a style={alignStyles} onClick={() => onSnoozeTask(id)}>\n          <span className=\"icon-link icon-sync\" />\n        </a>}\n      {state !== TaskState.TASK_PINNED &&\n        <a style={alignStyles} onClick={() => onPinTask(id)}>\n          <span className=\"icon-link icon-arrow-down\" />\n        </a>}\n    </div>\n      );\n}\n\nexport default Task;\n","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/Task.tsx",[],"/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/Task.stories.tsx",["91"],"import React from 'react';\n\nimport Task, { TaskProps, TaskState } from './Task';\n\nexport default {\n  component: Task,\n  title: 'Cloud-Clipboard/Task',\n};\n\nconst Template = (args: TaskProps) => <Task {...args} />;\n\nexport const Default: any= Template.bind({});\nDefault.args = {\n  id: '1',\n  title: 'Test Task',\n  state: TaskState.TASK_INBOX,\n  updatedAt: new Date(2018, 0, 1, 9, 0),\n};\n\nexport const Pinned:any = Template.bind({});\nPinned.args = {\n  ...Default.args,\n  state: TaskState.TASK_PINNED,\n};\n\nexport const Archived: any = Template.bind({});\nArchived.args = {\n  ...Default.args,\n  state: TaskState.TASK_ARCHIVED,\n};","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/TaskList.tsx",["92"],"import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { archiveTask, pinTask, TasksState } from '../lib/redux';\nimport Task, { TaskProps, TaskState } from './Task';\n\nexport interface TaskListProps {\n    loading: boolean;\n    tasks: TaskProps[];\n    onArchiveTask?: (id: string) => void;\n    onPinTask? : (id: string) => void;\n}\n\nexport function TaskList({ loading, tasks, onPinTask, onArchiveTask }: TaskListProps) {\n  const events = {\n    onPinTask,\n    onArchiveTask,\n  };\n  \n  const LoadingRow = (\n    <div className=\"loading-item\">\n      <span className=\"glow-checkbox\" />\n      <span className=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n    </div>\n  );\n\n  if (loading) {\n    return (\n        <div className=\"list-items\">\n          {LoadingRow}\n          {LoadingRow}\n          {LoadingRow}\n          {LoadingRow}\n          {LoadingRow}\n          {LoadingRow}\n        </div>\n      );\n  }\n\n  if (tasks.length === 0) {\n    return (\n        <div className=\"list-items\">\n          <div className=\"wrapper-message\">\n            <span className=\"icon-check\" />\n            <div className=\"title-message\">You have no tasks</div>\n            <div className=\"subtitle-message\">Sit back and relax</div>\n          </div>\n        </div>\n      );\n  }\n\n  const tasksInOrder = [\n    ...tasks.filter(t => t.state === TaskState.TASK_PINNED),\n    ...tasks.filter(t => t.state !== TaskState.TASK_PINNED),\n  ];\n\n  return (\n    <div className=\"list-items\">\n      {tasksInOrder.map(task => (\n        <Task key={task.id} {...task} />\n      ))}\n    </div>\n  );\n}\n\nexport default connect(\n  ({ tasks }: TasksState) => ({\n    tasks: tasks.filter(t => t.state === TaskState.TASK_INBOX || t.state === TaskState.TASK_PINNED),\n  }),\n  dispatch => ({\n    onArchiveTask: (id: string) => dispatch(archiveTask(id)),\n    onPinTask: (id: string) => dispatch(pinTask(id)),\n  })\n)(TaskList);\n","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/TaskList.stories.tsx",["93"],"import React from 'react';\n\nimport { TaskState } from './Task';\nimport { TaskList, TaskListProps } from './TaskList';\nimport * as TaskStories from './Task.stories';\n\nexport default {\n  component: TaskList,\n  title: 'Cloud-Clipboard/TaskList',\n  decorators: [(story: any) => <div style={{ padding: '3rem' }}>{story()}</div>],\n};\n\nconst Template = (args: TaskListProps) => <TaskList {...args} />;\n\nexport const Default: any = Template.bind({});\n// console.log(...TaskStories.Default.args.task);\nDefault.args = {\n  // Shaping the stories through args composition.\n  // The data was inherited from the Default story in task.stories.js.\n  tasks: [\n    { ...TaskStories.Default.args, id: '1', title: 'Task 1' },\n    { ...TaskStories.Default.args, id: '2', title: 'Task 2' },\n    { ...TaskStories.Default.args, id: '3', title: 'Task 3' },\n    { ...TaskStories.Default.args, id: '4', title: 'Task 4' },\n    { ...TaskStories.Default.args, id: '5', title: 'Task 5' },\n    { ...TaskStories.Default.args, id: '6', title: 'Task 6' },\n  ],\n};\n\nexport const WithPinnedTasks: any = Template.bind({});\nWithPinnedTasks.args = {\n  // Shaping the stories through args composition.\n  // Inherited data coming from the Default story.\n  tasks: [\n    ...Default.args.tasks.slice(0, 5),\n    { id: '6', title: 'Task 6 (pinned)', state: TaskState.TASK_PINNED },\n  ],\n};\n\nexport const Loading:any = Template.bind({});\nLoading.args = {\n  tasks: [],\n  loading: true,\n};\n\nexport const Empty:any = Template.bind({});\nEmpty.args = {\n  // Shaping the stories through args composition.\n  // Inherited data coming from the Loading story.\n  ...Loading.args,\n  loading: false,\n};","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/lib/redux.ts",["94","95"],"import { Reducer, createStore } from 'redux';\n\nimport { TaskProps, TaskState } from '../components/Task';\n\n// The actions are the \"names\" of the changes that can happen to the store\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\nexport const ARCHIVE_TASK = 'ARCHIVE_TASK';\nexport const PIN_TASK = 'PIN_TASK';\n\n\ninterface ArchiveTaskAction {\n    type: typeof actions.ARCHIVE_TASK\n    id: string\n}\n\ninterface PinTaskAction {\n    type: typeof actions.PIN_TASK\n    id: string\n}\n\ntype TASK_TYPES = typeof actions.ARCHIVE_TASK | typeof actions.PIN_TASK;\nconsole.log(typeof actions.ARCHIVE_TASK);\nconsole.log(typeof actions.PIN_TASK);\n\n\nexport interface TasksState {\n    tasks: TaskProps[]\n}\n\nexport type TaskActionTypes = ArchiveTaskAction | PinTaskAction;\n\n// The action creators bundle actions with the data required to execute them\nexport const archiveTask = (id: string): ArchiveTaskAction => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = (id:string): PinTaskAction => ({ type: actions.PIN_TASK, id });\n\n// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState: TaskState) {\n  return (state: TasksState, action: TaskActionTypes) => {\n    return {\n        ...state,\n        tasks: state.tasks.map(task => \n            task.id === action.id ? { ...task, state: taskState } : task\n        )\n    } as TasksState;\n  };\n}\n\n// The reducer describes how the contents of the store change for each action\nexport const reducer: Reducer<TasksState, TaskActionTypes> = (state = {tasks: defaultTasks}, action) => {\n  switch (action.type) {\n    case actions.ARCHIVE_TASK:\n      return taskStateReducer(TaskState.TASK_ARCHIVED)(state, action);\n    case actions.PIN_TASK:\n      return taskStateReducer(TaskState.TASK_PINNED)(state, action);\n    default:\n      return state;\n  }\n};\n\n\n// const archiveReducer = reducer(actions.ARCHIVE_TASK,)\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks: TaskProps[] = [\n  { id: '1', title: 'Something', state: TaskState.TASK_INBOX },\n  { id: '2', title: 'Something more', state: TaskState.TASK_INBOX },\n  { id: '3', title: 'Something else', state: TaskState.TASK_INBOX },\n  { id: '4', title: 'Something again', state: TaskState.TASK_INBOX },\n];\n\nfunction taskArchiveReducer(state: TasksState = {tasks: defaultTasks}, action: TaskActionTypes) {\n    // return state;\n    return {\n        ...state,\n        tasks: state.tasks.map(task =>\n          task.id === action.id ? { ...task, state: action.type } : task\n        )\n    } as TasksState;\n}\nexport type RootState = ReturnType<typeof reducer>\n\n// We export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks });\n// export default createStore(reducer);","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/InboxScreen.tsx",["96","97","98"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport TaskList from './TaskList';\nimport { RootState } from '../lib/redux';\n\ninterface StateProps {\n\n}\n\ninterface DispatchProps {\n\n}\n\ninterface OwnProps {\n    error: String;\n}\n\nexport type PureInboxScreenProp = StateProps & DispatchProps & OwnProps;\n\nexport function PureInboxScreen({ error = '' }: PureInboxScreenProp) {\n  if (error) {\n    return (\n      <div className=\"page lists-show\">\n        <div className=\"wrapper-message\">\n          <span className=\"icon-face-sad\" />\n          <div className=\"title-message\">Oh no!</div>\n          <div className=\"subtitle-message\">Something went wrong</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"page lists-show\">\n      <nav>\n        <h1 className=\"title-page\">\n          <span className=\"title-wrapper\">Taskbox</span>\n        </h1>\n      </nav>\n      <TaskList loading={false}/>\n    </div>\n  );\n}\n\n// PureInboxScreen.propTypes = {\n//   /** The error message */\n//   error: PropTypes.string,\n// };\n\n// PureInboxScreen.defaultProps = {\n//   error: null,\n// };\n\nconst mapState = (state: RootState) => ({ \n    \n});\n\nconst mapDispatch = {\n\n}\n\n// export default connect<StateProps, DispatchProps, OwnProps>(mapState, mapDispatch, ({ error }) => ({ error }))(PureInboxScreen);\nexport default connect()(PureInboxScreen);","/Volumes/workplace/pus11/amplify/amplify-docs/amplify-docs/src/components/InboxScreen.stories.tsx",["99"],"import React from 'react';\nimport { Provider } from 'react-redux';\nimport { action } from '@storybook/addon-actions';\nimport { PureInboxScreen, PureInboxScreenProp } from './InboxScreen';\nimport * as TaskListStories from './TaskList.stories';\n\n// A super-simple mock of a redux store\nconst store: any = {\n  getState: () => {\n    console.log(TaskListStories.Default.args.tasks);\n    return {\n      tasks: TaskListStories.Default.args.tasks,\n    };\n  },\n  subscribe: () => 0,\n  dispatch: action('dispatch'),\n};\n\nexport default {\n  component: PureInboxScreen,\n  decorators: [(story: () => React.ReactNode) => <Provider store={store}>{story()}</Provider>],\n  title: 'Cloud-Clipboard/InboxScreen',\n};\n\nconst Template = (args:PureInboxScreenProp) => <PureInboxScreen {...args} />;\n\nexport const Default = Template.bind({});\n\nexport const Error: any = Template.bind({});\nError.args = {\n  error: 'Something',\n};",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"100","replacedBy":"104"},{"ruleId":"102","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":5,"column":16,"nodeType":"108","messageId":"109","endLine":5,"endColumn":25},{"ruleId":"110","severity":1,"message":"111","line":57,"column":9,"nodeType":"112","endLine":57,"endColumn":65},{"ruleId":"110","severity":1,"message":"111","line":61,"column":9,"nodeType":"112","endLine":61,"endColumn":62},{"ruleId":"113","severity":1,"message":"114","line":5,"column":1,"nodeType":"115","endLine":8,"endColumn":3},{"ruleId":"106","severity":1,"message":"116","line":15,"column":9,"nodeType":"108","messageId":"109","endLine":15,"endColumn":15},{"ruleId":"113","severity":1,"message":"114","line":7,"column":1,"nodeType":"115","endLine":11,"endColumn":3},{"ruleId":"106","severity":1,"message":"117","line":24,"column":6,"nodeType":"108","messageId":"109","endLine":24,"endColumn":16},{"ruleId":"106","severity":1,"message":"118","line":75,"column":10,"nodeType":"108","messageId":"109","endLine":75,"endColumn":28},{"ruleId":"106","severity":1,"message":"119","line":2,"column":8,"nodeType":"108","messageId":"109","endLine":2,"endColumn":17},{"ruleId":"106","severity":1,"message":"120","line":56,"column":7,"nodeType":"108","messageId":"109","endLine":56,"endColumn":15},{"ruleId":"106","severity":1,"message":"121","line":60,"column":7,"nodeType":"108","messageId":"109","endLine":60,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":19,"column":1,"nodeType":"115","endLine":23,"endColumn":3},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],["122"],["123"],"@typescript-eslint/no-unused-vars","'TaskProps' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'events' is assigned a value but never used.","'TASK_TYPES' is defined but never used.","'taskArchiveReducer' is defined but never used.","'PropTypes' is defined but never used.","'mapState' is assigned a value but never used.","'mapDispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]